name: Cross-Platform Installation Test

on:
  workflow_dispatch:
    inputs:
      aiexec-version:
        description: "Aiexec version to test from PyPI (leave empty to test from source)"
        required: false
        type: string
        default: ""
  workflow_call:
    inputs:
      base-artifact-name:
        description: "Name of the base package artifact"
        required: true
        type: string
      main-artifact-name:
        description: "Name of the main package artifact"
        required: true
        type: string
      wfx-artifact-name:
        description: "Name of the WFX package artifact"
        required: false
        type: string

jobs:
  build-if-needed:
    name: Build Packages (if no artifacts provided)
    runs-on: ubuntu-latest
    if: inputs.aiexec-version == '' && contains(github.workflow_ref, 'cross-platform-test.yml')
    outputs:
      base-artifact-name: ${{ steps.set-names.outputs.base-artifact-name }}
      main-artifact-name: ${{ steps.set-names.outputs.main-artifact-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Environment
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          python-version: "3.13"
      - name: Install the project
        run: uv sync
      - name: Install frontend dependencies
        run: make install_frontendci
      - name: Build frontend
        run: make build_frontend
      - name: Build base package
        run: make build_aiexec_base args="--wheel"
      - name: Move base package to correct directory
        run: |
          # Base package builds to dist/ but should be in src/backend/base/dist/
          mkdir -p src/backend/base/dist
          mv dist/aiexec_base*.whl src/backend/base/dist/
      - name: Build main package
        run: make build_aiexec args="--wheel"
      - name: Upload base artifact
        uses: actions/upload-artifact@v4
        with:
          name: adhoc-dist-base
          path: src/backend/base/dist
      - name: Upload main artifact
        uses: actions/upload-artifact@v4
        with:
          name: adhoc-dist-main
          path: dist
      - name: Set artifact names
        id: set-names
        run: |
          echo "base-artifact-name=adhoc-dist-base" >> $GITHUB_OUTPUT
          echo "main-artifact-name=adhoc-dist-main" >> $GITHUB_OUTPUT

  test-installation-stable:
    name: Install & Run - ${{ matrix.os }} ${{ matrix.arch }} ${{ matrix.python-version }}
    needs: [build-if-needed]
    if: always() && (needs.build-if-needed.result == 'success' || needs.build-if-needed.result == 'skipped')
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux AMD64
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            python-version: "3.10"
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            python-version: "3.12"
          # macOS AMD64
          - os: macos
            arch: amd64
            runner: macos-13
            python-version: "3.10"
          - os: macos
            arch: amd64
            runner: macos-13
            python-version: "3.12"
          # macOS ARM64 (Apple Silicon)
          - os: macos
            arch: arm64
            runner: macos-latest
            python-version: "3.10"
          - os: macos
            arch: arm64
            runner: macos-latest
            python-version: "3.12"
          # Windows AMD64
          - os: windows
            arch: amd64
            runner: windows-latest
            python-version: "3.10"
          - os: windows
            arch: amd64
            runner: windows-latest
            python-version: "3.12"

    steps:
      - name: Determine install method
        id: install-method
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ inputs.aiexec-version }}" ]; then
              echo "method=pypi" >> $GITHUB_OUTPUT
            else
     